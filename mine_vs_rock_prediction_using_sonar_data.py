# -*- coding: utf-8 -*-
"""Mine vs Rock Prediction using Sonar Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XiUHuKS1TErIp06iRyLsBf-pNQKmLJZB

Importing the Libraries
"""

import numpy as np
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

"""Importing the Dataset and converting it into a DataFrame"""

df = pd.read_csv("/content/sonar data.csv",header = None) #converting the data into a Pandas DataFrame

df.head() #Displaying the top 5 rows of the DataFrame

df.shape #

df.describe() #descriptive statistics analysis

df.value_counts([60])

"""M - Mine

R - Rock

split the dataset into Input and Output Variables
"""

X = df.drop(columns = 60,axis = 1)
Y = df[60]

print(X)
print(Y)

"""Split the data into 80% of training data and 20% of test data"""

X_train,  X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify = Y, random_state = 42)

print(X.shape, X_train.shape, X_test.shape)

print(X_train)
print(Y_train)

"""Training the Model using Logistic Regression"""

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Model Evaluation"""

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("Accuracy for Training Data: ",training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print("Accuracy for Test Data: ",test_data_accuracy)

"""Predict the Model"""

input_data = (0.0117,0.0069,0.0279,0.0583,0.0915,0.1267,0.1577,0.1927,0.2361,0.2169,0.1180,0.0754,0.2782,0.3758,0.5093,0.6592,0.7071,0.7532,0.8357,0.8593,0.9615,0.9838,0.8705,0.6403,0.5067,0.5395,0.6934,0.8487,0.8213,0.5962,0.2950,0.2758,0.2885,0.1893,0.1446,0.0955,0.0888,0.0836,0.0894,0.1547,0.2318,0.2225,0.1035,0.1721,0.2017,0.1787,0.1112,0.0398,0.0305,0.0084,0.0039,0.0053,0.0029,0.0020,0.0013,0.0029,0.0020,0.0062,0.0026,0.0052)
numpy_array = np.asarray(input_data)
reshaped_array = numpy_array.reshape(1,-1)
prediction = model.predict(reshaped_array)
print(prediction)

second_input_data = (0.0336,0.0294,0.0476,0.0539,0.0794,0.0804,0.1136,0.1228,0.1235,0.0842,0.0357,0.0689,0.1705,0.3257,0.4602,0.6225,0.7327,0.7843,0.7988,0.8261,1.0000,0.9814,0.9620,0.9601,0.9118,0.9086,0.7931,0.5877,0.3474,0.4235,0.4633,0.3410,0.2849,0.2847,0.1742,0.0549,0.1192,0.1154,0.0855,0.1811,0.1264,0.0799,0.0378,0.1268,0.1125,0.0505,0.0949,0.0677,0.0259,0.0170,0.0033,0.0150,0.0111,0.0032,0.0035,0.0169,0.0137,0.0015,0.0069,0.0051)
numpy_array = np.asarray(second_input_data)
reshaped_array = numpy_array.reshape(1,-1)
prediction = model.predict(reshaped_array)
print(prediction)

